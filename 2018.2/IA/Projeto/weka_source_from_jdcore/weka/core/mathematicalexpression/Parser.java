package weka.core.mathematicalexpression;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Stack;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;

public class Parser extends lr_parser
{
  public Parser() {}
  
  public Parser(java_cup.runtime.Scanner s)
  {
    super(s);
  }
  
  public Parser(java_cup.runtime.Scanner s, SymbolFactory sf) { super(s, sf); }
  

  protected static final short[][] _production_table = unpackFromStrings(new String[] { "\000&\000\002\002\004\000\002\002\004\000\002\002\003\000\002\003\003\000\002\004\003\000\002\004\005\000\002\004\003\000\002\004\003\000\002\004\003\000\002\005\005\000\002\005\005\000\002\005\005\000\002\005\005\000\002\006\003\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\006\000\002\007\b\000\002\007\006\000\002\007\n\000\002\b\003\000\002\b\003\000\002\b\003\000\002\b\005\000\002\b\005\000\002\b\005\000\002\b\005\000\002\b\005\000\002\b\005\000\002\b\004\000\002\b\005\000\002\b\005" });
  












  public short[][] production_table()
  {
    return _production_table;
  }
  
  protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000d\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\004\005H\001\002\000\004\005E\001\002\000*\002￾\005￾\007\036\b\034\t\037\n\035\013￾\f￾\r￾\016￾\017￾\020￾\021￾\022￾\023￾\024￾\025￾\026￾!￾#￾\001\002\000<\002￺\004￺\005￺\006￺\007￺\b￺\t￺\n￺\013￺\f￺\r￺\016￺\017￺\020￺\021￺\022￺\023￺\024￺\025￺\026￺\031￺\032￺\033￺\034￺\035￺\037￺ ￺!￺#￺\001\002\000\004\005B\001\002\000\004\005?\001\002\000\004\005:\001\002\000<\002￴\004￴\005￴\006￴\007￴\b￴\t￴\n￴\013￴\f￴\r￴\016￴\017￴\020￴\021￴\022￴\023￴\024￴\025￴\026￴\031￴\032￴\033￴\034￴\035￴\037￴ ￴!￴#￴\001\002\000\004\0057\001\002\000\004\0054\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\004\005/\001\002\000\004\005,\001\002\000\004\005)\001\002\000\"\002￿\005￿\013￿\f￿\r￿\016￿\017￿\020￿\021￿\022￿\023￿\024￿\025￿\026￿!￿#￿\001\002\000<\002�\004�\005�\006�\007�\b�\t�\n�\013�\f�\r�\016�\017�\020�\021�\022�\023�\024�\025�\026�\031�\032�\033�\034�\035�\037� �!�#�\001\002\000<\002￹\004￹\005￹\006￹\007￹\b￹\t￹\n￹\013￹\f￹\r￹\016￹\017￹\020￹\021￹\022￹\023￹\024￹\025￹\026￹\031￹\032￹\033￹\034￹\035￹\037￹ ￹!￹#￹\001\002\000\004\005&\001\002\000\"\002%\005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000<\002￻\004￻\005￻\006￻\007￻\b￻\t￻\n￻\013￻\f￻\r￻\016￻\017￻\020￻\021￻\022￻\023￻\024￻\025￻\026￻\031￻\032￻\033￻\034￻\035￻\037￻ ￻!￻#￻\001\002\000\004\005\031\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006\033\007\036\b\034\t\037\n\035\001\002\000<\002￭\004￭\005￭\006￭\007￭\b￭\t￭\n￭\013￭\f￭\r￭\016￭\017￭\020￭\021￭\022￭\023￭\024￭\025￭\026￭\031￭\032￭\033￭\034￭\035￭\037￭ ￭!￭#￭\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000<\002￶\004￶\005￶\006￶\007￶\b￶\t￶\n￶\013￶\f￶\r￶\016￶\017￶\020￶\021￶\022￶\023￶\024￶\025￶\026￶\031￶\032￶\033￶\034￶\035￶\037￶ ￶!￶#￶\001\002\000<\002￷\004￷\005￷\006￷\007￷\b￷\t\037\n\035\013￷\f￷\r￷\016￷\017￷\020￷\021￷\022￷\023￷\024￷\025￷\026￷\031￷\032￷\033￷\034￷\035￷\037￷ ￷!￷#￷\001\002\000<\002￵\004￵\005￵\006￵\007￵\b￵\t￵\n￵\013￵\f￵\r￵\016￵\017￵\020￵\021￵\022￵\023￵\024￵\025￵\026￵\031￵\032￵\033￵\034￵\035￵\037￵ ￵!￵#￵\001\002\000<\002￸\004￸\005￸\006￸\007￸\b￸\t\037\n\035\013￸\f￸\r￸\016￸\017￸\020￸\021￸\022￸\023￸\024￸\025￸\026￸\031￸\032￸\033￸\034￸\035￸\037￸ ￸!￸#￸\001\002\000\"\002\001\005\001\013\001\f\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001!\001#\001\001\002\000\004\002\000\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006(\007\036\b\034\t\037\n\035\001\002\000<\002￳\004￳\005￳\006￳\007￳\b￳\t￳\n￳\013￳\f￳\r￳\016￳\017￳\020￳\021￳\022￳\023￳\024￳\025￳\026￳\031￳\032￳\033￳\034￳\035￳\037￳ ￳!￳#￳\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006+\007\036\b\034\t\037\n\035\001\002\000<\002￱\004￱\005￱\006￱\007￱\b￱\t￱\n￱\013￱\f￱\r￱\016￱\017￱\020￱\021￱\022￱\023￱\024￱\025￱\026￱\031￱\032￱\033￱\034￱\035￱\037￱ ￱!￱#￱\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006.\007\036\b\034\t\037\n\035\001\002\000<\002￰\004￰\005￰\006￰\007￰\b￰\t￰\n￰\013￰\f￰\r￰\016￰\017￰\020￰\021￰\022￰\023￰\024￰\025￰\026￰\031￰\032￰\033￰\034￰\035￰\037￰ ￰!￰#￰\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\0061\007\036\b\034\t\037\n\035\001\002\000<\002￩\004￩\005￩\006￩\007￩\b￩\t￩\n￩\013￩\f￩\r￩\016￩\017￩\020￩\021￩\022￩\023￩\024￩\025￩\026￩\031￩\032￩\033￩\034￩\035￩\037￩ ￩!￩#￩\001\002\000\f\0063\007\036\b\034\t\037\n\035\001\002\000<\002￼\004￼\005￼\006￼\007￼\b￼\t￼\n￼\013￼\f￼\r￼\016￼\017￼\020￼\021￼\022￼\023￼\024￼\025￼\026￼\031￼\032￼\033￼\034￼\035￼\037￼ ￼!￼#￼\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\0066\007\036\b\034\t\037\n\035\001\002\000<\002￬\004￬\005￬\006￬\007￬\b￬\t￬\n￬\013￬\f￬\r￬\016￬\017￬\020￬\021￬\022￬\023￬\024￬\025￬\026￬\031￬\032￬\033￬\034￬\035￬\037￬ ￬!￬#￬\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\0069\007\036\b\034\t\037\n\035\001\002\000<\002￫\004￫\005￫\006￫\007￫\b￫\t￫\n￫\013￫\f￫\r￫\016￫\017￫\020￫\021￫\022￫\023￫\024￫\025￫\026￫\031￫\032￫\033￫\034￫\035￫\037￫ ￫!￫#￫\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\004<\007\036\b\034\t\037\n\035\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006>\007\036\b\034\t\037\n\035\001\002\000<\002￪\004￪\005￪\006￪\007￪\b￪\t￪\n￪\013￪\f￪\r￪\016￪\017￪\020￪\021￪\022￪\023￪\024￪\025￪\026￪\031￪\032￪\033￪\034￪\035￪\037￪ ￪!￪#￪\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006A\007\036\b\034\t\037\n\035\001\002\000<\002￲\004￲\005￲\006￲\007￲\b￲\t￲\n￲\013￲\f￲\r￲\016￲\017￲\020￲\021￲\022￲\023￲\024￲\025￲\026￲\031￲\032￲\033￲\034￲\035￲\037￲ ￲!￲#￲\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006D\007\036\b\034\t\037\n\035\001\002\000<\002￮\004￮\005￮\006￮\007￮\b￮\t￮\n￮\013￮\f￮\r￮\016￮\017￮\020￮\021￮\022￮\023￮\024￮\025￮\026￮\031￮\032￮\033￮\034￮\035￮\037￮ ￮!￮#￮\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006G\007\036\b\034\t\037\n\035\001\002\000<\002￯\004￯\005￯\006￯\007￯\b￯\t￯\n￯\013￯\f￯\r￯\016￯\017￯\020￯\021￯\022￯\023￯\024￯\025￯\026￯\031￯\032￯\033￯\034￯\035￯\037￯ ￯!￯#￯\001\002\000(\005L\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004\027K\030O\036J!\023\"M#\013\001\002\000\024\007\036\b\034\t\037\n\035\031`\032^\033_\034\\\035]\001\002\000(\005L\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004\027K\030O\036J!\023\"M#\013\001\002\000\n\004￦\006￦\037￦ ￦\001\002\000(\005L\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004\027K\030O\036J!\023\"M#\013\001\002\000\n\004￧\006￧\037￧ ￧\001\002\000\b\004P\037Q R\001\002\000\n\004￥\006￥\037￥ ￥\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000(\005L\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004\027K\030O\036J!\023\"M#\013\001\002\000(\005L\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004\027K\030O\036J!\023\"M#\013\001\002\000\n\004ￜ\006ￜ\037ￜ ￜ\001\002\000\n\004￝\006￝\037￝ ￝\001\002\000\f\004V\007\036\b\034\t\037\n\035\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\f\006X\007\036\b\034\t\037\n\035\001\002\000<\002￨\004￨\005￨\006￨\007￨\b￨\t￨\n￨\013￨\f￨\r￨\016￨\017￨\020￨\021￨\022￨\023￨\024￨\025￨\026￨\031￨\032￨\033￨\034￨\035￨\037￨ ￨!￨#￨\001\002\000\026\0063\007\036\b\034\t\037\n\035\031`\032^\033_\034\\\035]\001\002\000\b\006[\037Q R\001\002\000\n\004￟\006￟\037￟ ￟\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000 \005\016\013\025\f\t\r\021\016\020\017\005\020\b\021\030\022\r\023\f\024\n\025\017\026\004!\023#\013\001\002\000\022\004￤\006￤\007\036\b\034\t\037\n\035\037￤ ￤\001\002\000\022\004￢\006￢\007\036\b\034\t\037\n\035\037￢ ￢\001\002\000\022\004￣\006￣\007\036\b\034\t\037\n\035\037￣ ￣\001\002\000\022\004￠\006￠\007\036\b\034\t\037\n\035\037￠ ￠\001\002\000\022\004￡\006￡\007\036\b\034\t\037\n\035\037￡ ￡\001\002\000\n\004￞\006￞\037￞ ￞\001\002" });
  
















































































































































































































































  public short[][] action_table()
  {
    return _action_table;
  }
  
  protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000d\000\016\002\025\003\021\004\005\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\0041\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\f\003#\004\005\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004\031\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004\"\005\026\006\006\007\023\001\001\000\n\004!\005\026\006\006\007\023\001\001\000\n\004 \005\026\006\006\007\023\001\001\000\n\004\037\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004&\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004)\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004,\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004/\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\0044\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\0047\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004:\005\026\006\006\007\023\001\001\000\002\001\001\000\n\004<\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004?\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004B\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\n\004E\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\f\004H\005\026\006\006\007\023\bM\001\001\000\002\001\001\000\f\004H\005\026\006\006\007\023\be\001\001\000\002\001\001\000\f\004X\005\026\006\006\007\023\bY\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004T\005\026\006\006\007\023\001\001\000\f\004H\005\026\006\006\007\023\bS\001\001\000\f\004H\005\026\006\006\007\023\bR\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004V\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004d\005\026\006\006\007\023\001\001\000\n\004c\005\026\006\006\007\023\001\001\000\n\004b\005\026\006\006\007\023\001\001\000\n\004a\005\026\006\006\007\023\001\001\000\n\004`\005\026\006\006\007\023\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001" });
  

























  protected CUP.Parser.actions action_obj;
  

























  public short[][] reduce_table()
  {
    return _reduce_table;
  }
  



  protected void init_actions()
  {
    action_obj = new CUP.Parser.actions(this);
  }
  






  public java_cup.runtime.Symbol do_action(int act_num, lr_parser parser, Stack stack, int top)
    throws Exception
  {
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }
  

  public int start_state() { return 0; }
  
  public int start_production() { return 1; }
  
  public int EOF_sym() {
    return 0;
  }
  
  public int error_sym() { return 1; }
  



  protected HashMap m_Symbols = new HashMap();
  

  protected Double m_Result = null;
  




  public void setSymbols(HashMap value)
  {
    m_Symbols = value;
  }
  




  public HashMap getSymbols()
  {
    return m_Symbols;
  }
  




  public void setResult(Double value)
  {
    m_Result = value;
  }
  




  public Double getResult()
  {
    return m_Result;
  }
  









  public static void main(String[] args)
    throws Exception
  {
    HashMap symbols = new HashMap();
    if ((args.length > 0) && 
      (args[0].equals("-symbols")))
    {
      String[] pairs = args[1].replaceAll(" ", "").split(";");
      for (int i = 0; i < pairs.length; i++) {
        String[] parts = pairs[i].split("=");
        symbols.put(parts[0], new Double(parts[1]));
      }
      
      System.out.println("\nSymbols provided:");
      Iterator iter = symbols.keySet().iterator();
      while (iter.hasNext()) {
        String key = (String)iter.next();
        System.out.println(key + "=" + symbols.get(key));
      }
      
      String[] argsNew = new String[args.length - 2];
      System.arraycopy(args, 2, argsNew, 0, argsNew.length);
      args = argsNew;
    }
    


    int index = -1;
    if (args.length == 1)
      index = 0;
    BufferedReader input = null;
    if (index == -1) {
      System.out.println("\nPlease type in expressions (and press <Enter>), exit with <Ctrl+D>:");
      input = new BufferedReader(new InputStreamReader(System.in));
    }
    else {
      System.out.println("\nReading expressions from file '" + args[index] + "':");
      input = new BufferedReader(new FileReader(args[index]));
    }
    

    SymbolFactory sf = new DefaultSymbolFactory();
    String line;
    while ((line = input.readLine()) != null) {
      ByteArrayInputStream parserInput = new ByteArrayInputStream(line.getBytes());
      Parser parser = new Parser(new Scanner(parserInput, sf), sf);
      parser.setSymbols(symbols);
      parser.parse();
      System.out.println(line + " = " + parser.getResult());
    }
  }
}
