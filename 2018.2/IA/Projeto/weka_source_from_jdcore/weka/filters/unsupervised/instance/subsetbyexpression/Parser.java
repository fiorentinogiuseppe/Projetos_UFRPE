package weka.filters.unsupervised.instance.subsetbyexpression;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.FileWriter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Stack;
import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.lr_parser;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;

public class Parser extends lr_parser
{
  public Parser() {}
  
  public Parser(java_cup.runtime.Scanner s)
  {
    super(s);
  }
  
  public Parser(java_cup.runtime.Scanner s, SymbolFactory sf) { super(s, sf); }
  

  protected static final short[][] _production_table = unpackFromStrings(new String[] {b\000\002\006\006" });
  












  public short[][] production_table()
  {
    return _production_table;
  }
  
  protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000b\000(\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\000\004\005b\001\002\000\024\b%\t#\n&\013$\031H\032F\033G\034D\035E\001\002\000\004\005_\001\002\000\030\006￮\b￮\t￮\n￮\013￮\031￮\032￮\033￮\034￮\035￮!]\001\002\000(\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\000\004\005W\001\002\000\004\005T\001\002\0000\002￼\005￼\006￼\007￼\f￼\r￼\016￼\017￼\020￼\021￼\022￼\023￼\024￼\025￼\026￼\027￼\030￼\036￼\037￼ ￼\"￼#￼$￼\001\002\000\004\005Q\001\002\000\004\005N\001\002\000(\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\000\004\005>\001\002\000\004\005;\001\002\000\004\0058\001\002\0000\002�\005�\006�\007�\f�\r�\016�\017�\020�\021�\022�\023�\024�\025�\026�\027�\030�\036�\037� �\"�#�$�\001\002\000*\002￿\005￿\007￿\f￿\r￿\016￿\017￿\020￿\021￿\022￿\023￿\024￿\025￿\026￿\027￿\030￿\036￿\"￿#￿$￿\001\002\000D\002￯\004￯\005￯\006￯\007￯\b￯\t￯\n￯\013￯\f￯\r￯\016￯\017￯\020￯\021￯\022￯\023￯\024￯\025￯\026￯\027￯\030￯\031￯\032￯\033￯\034￯\035￯\036￯\037￯ ￯\"￯#￯$￯\001\002\000D\002￫\004￫\005￫\006￫\007￫\b￫\t￫\n￫\013￫\f￫\r￫\016￫\017￫\020￫\021￫\022￫\023￫\024￫\025￫\026￫\027￫\030￫\031￫\032￫\033￫\034￫\035￫\036￫\037￫ ￫\"￫#￫$￫\001\002\000\004\0055\001\002\000*\0024\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\000.\002￾\005￾\007￾\f￾\r￾\016￾\017￾\020￾\021￾\022￾\023￾\024￾\025￾\026￾\027￾\030￾\036￾\037/ 0\"￾#￾$￾\001\002\0000\002￻\005￻\006￻\007￻\f￻\r￻\016￻\017￻\020￻\021￻\022￻\023￻\024￻\025￻\026￻\027￻\030￻\036￻\037￻ ￻\"￻#￻$￻\001\002\000D\002￬\004￬\005￬\006￬\007￬\b￬\t￬\n￬\013￬\f￬\r￬\016￬\017￬\020￬\021￬\022￬\023￬\024￬\025￬\026￬\027￬\030￬\031￬\032￬\033￬\034￬\035￬\036￬\037￬ ￬\"￬#￬$￬\001\002\000\004\005,\001\002\000\004\005\035\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000D\002￮\004￮\005￮\006￮\007￮\b￮\t￮\n￮\013￮\f￮\r￮\016￮\017￮\020￮\021￮\022￮\023￮\024￮\025￮\026￮\027￮\030￮\031￮\032￮\033￮\034￮\035￮\036￮\037￮ ￮\"￮#￮$￮\001\002\000\f\006+\b%\t#\n&\013$\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006\"\b%\t#\n&\013$\001\002\000D\002￭\004￭\005￭\006￭\007￭\b￭\t￭\n￭\013￭\f￭\r￭\016￭\017￭\020￭\021￭\022￭\023￭\024￭\025￭\026￭\027￭\030￭\031￭\032￭\033￭\034￭\035￭\036￭\037￭ ￭\"￭#￭$￭\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000D\002￨\004￨\005￨\006￨\007￨\b￨\t￨\n￨\013￨\f￨\r￨\016￨\017￨\020￨\021￨\022￨\023￨\024￨\025￨\026￨\027￨\030￨\031￨\032￨\033￨\034￨\035￨\036￨\037￨ ￨\"￨#￨$￨\001\002\000D\002￩\004￩\005￩\006￩\007￩\b￩\t￩\n&\013$\f￩\r￩\016￩\017￩\020￩\021￩\022￩\023￩\024￩\025￩\026￩\027￩\030￩\031￩\032￩\033￩\034￩\035￩\036￩\037￩ ￩\"￩#￩$￩\001\002\000D\002￧\004￧\005￧\006￧\007￧\b￧\t￧\n￧\013￧\f￧\r￧\016￧\017￧\020￧\021￧\022￧\023￧\024￧\025￧\026￧\027￧\030￧\031￧\032￧\033￧\034￧\035￧\036￧\037￧ ￧\"￧#￧$￧\001\002\000D\002￪\004￪\005￪\006￪\007￪\b￪\t￪\n&\013$\f￪\r￪\016￪\017￪\020￪\021￪\022￪\023￪\024￪\025￪\026￪\027￪\030￪\031￪\032￪\033￪\034￪\035￪\036￪\037￪ ￪\"￪#￪$￪\001\002\000D\002￠\004￠\005￠\006￠\007￠\b￠\t￠\n￠\013￠\f￠\r￠\016￠\017￠\020￠\021￠\022￠\023￠\024￠\025￠\026￠\027￠\030￠\031￠\032￠\033￠\034￠\035￠\036￠\037￠ ￠\"￠#￠$￠\001\002\000\004$-\001\002\000\004\006.\001\002\0000\002￰\005￰\006￰\007￰\f￰\r￰\016￰\017￰\020￰\021￰\022￰\023￰\024￰\025￰\026￰\027￰\030￰\036￰\037￰ ￰\"￰#￰$￰\001\002\000(\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\000(\005\016\007\033\f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\027\013\030\031\036\b\"\024#\022$\007\001\002\0000\002￲\005￲\006￲\007￲\f￲\r￲\016￲\017￲\020￲\021￲\022￲\023￲\024￲\025￲\026￲\027￲\030￲\036￲\037￲ ￲\"￲#￲$￲\001\002\0000\002￳\005￳\006￳\007￳\f￳\r￳\016￳\017￳\020￳\021￳\022￳\023￳\024￳\025￳\026￳\027￳\030￳\036￳\037￳ ￳\"￳#￳$￳\001\002\000*\002\001\005\001\007\001\f\001\r\001\016\001\017\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\030\001\036\001\"\001#\001$\001\001\002\000\004\002\000\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\0067\b%\t#\n&\013$\001\002\000D\002￦\004￦\005￦\006￦\007￦\b￦\t￦\n￦\013￦\f￦\r￦\016￦\017￦\020￦\021￦\022￦\023￦\024￦\025￦\026￦\027￦\030￦\031￦\032￦\033￦\034￦\035￦\036￦\037￦ ￦\"￦#￦$￦\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006:\b%\t#\n&\013$\001\002\000D\002￣\004￣\005￣\006￣\007￣\b￣\t￣\n￣\013￣\f￣\r￣\016￣\017￣\020￣\021￣\022￣\023￣\024￣\025￣\026￣\027￣\030￣\031￣\032￣\033￣\034￣\035￣\036￣\037￣ ￣\"￣#￣$￣\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006=\b%\t#\n&\013$\001\002\000D\002￤\004￤\005￤\006￤\007￤\b￤\t￤\n￤\013￤\f￤\r￤\016￤\017￤\020￤\021￤\022￤\023￤\024￤\025￤\026￤\027￤\030￤\031￤\032￤\033￤\034￤\035￤\036￤\037￤ ￤\"￤#￤$￤\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006@\b%\t#\n&\013$\001\002\000D\002ￜ\004ￜ\005ￜ\006ￜ\007ￜ\bￜ\tￜ\nￜ\013ￜ\fￜ\rￜ\016ￜ\017ￜ\020ￜ\021ￜ\022ￜ\023ￜ\024ￜ\025ￜ\026ￜ\027ￜ\030ￜ\031ￜ\032ￜ\033ￜ\034ￜ\035ￜ\036ￜ\037ￜ ￜ\"ￜ#ￜ$ￜ\001\002\000\026\006\"\b%\t#\n&\013$\031H\032F\033G\034D\035E\001\002\000\b\006C\037/ 0\001\002\0000\002￵\005￵\006￵\007￵\f￵\r￵\016￵\017￵\020￵\021￵\022￵\023￵\024￵\025￵\026￵\027￵\030￵\036￵\037￵ ￵\"￵#￵$￵\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\0008\002￺\005￺\006￺\007￺\b%\t#\n&\013$\f￺\r￺\016￺\017￺\020￺\021￺\022￺\023￺\024￺\025￺\026￺\027￺\030￺\036￺\037￺ ￺\"￺#￺$￺\001\002\0008\002￸\005￸\006￸\007￸\b%\t#\n&\013$\f￸\r￸\016￸\017￸\020￸\021￸\022￸\023￸\024￸\025￸\026￸\027￸\030￸\036￸\037￸ ￸\"￸#￸$￸\001\002\0008\002￹\005￹\006￹\007￹\b%\t#\n&\013$\f￹\r￹\016￹\017￹\020￹\021￹\022￹\023￹\024￹\025￹\026￹\027￹\030￹\036￹\037￹ ￹\"￹#￹$￹\001\002\0008\002￶\005￶\006￶\007￶\b%\t#\n&\013$\f￶\r￶\016￶\017￶\020￶\021￶\022￶\023￶\024￶\025￶\026￶\027￶\030￶\036￶\037￶ ￶\"￶#￶$￶\001\002\0008\002￷\005￷\006￷\007￷\b%\t#\n&\013$\f￷\r￷\016￷\017￷\020￷\021￷\022￷\023￷\024￷\025￷\026￷\027￷\030￷\036￷\037￷ ￷\"￷#￷$￷\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006P\b%\t#\n&\013$\001\002\000D\002￞\004￞\005￞\006￞\007￞\b￞\t￞\n￞\013￞\f￞\r￞\016￞\017￞\020￞\021￞\022￞\023￞\024￞\025￞\026￞\027￞\030￞\031￞\032￞\033￞\034￞\035￞\036￞\037￞ ￞\"￞#￞$￞\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006S\b%\t#\n&\013$\001\002\000D\002￟\004￟\005￟\006￟\007￟\b￟\t￟\n￟\013￟\f￟\r￟\016￟\017￟\020￟\021￟\022￟\023￟\024￟\025￟\026￟\027￟\030￟\031￟\032￟\033￟\034￟\035￟\036￟\037￟ ￟\"￟#￟$￟\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006V\b%\t#\n&\013$\001\002\000D\002￥\004￥\005￥\006￥\007￥\b￥\t￥\n￥\013￥\f￥\r￥\016￥\017￥\020￥\021￥\022￥\023￥\024￥\025￥\026￥\027￥\030￥\031￥\032￥\033￥\034￥\035￥\036￥\037￥ ￥\"￥#￥$￥\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\004Y\b%\t#\n&\013$\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006[\b%\t#\n&\013$\001\002\000D\002￝\004￝\005￝\006￝\007￝\b￝\t￝\n￝\013￝\f￝\r￝\016￝\017￝\020￝\021￝\022￝\023￝\024￝\025￝\026￝\027￝\030￝\031￝\032￝\033￝\034￝\035￝\036￝\037￝ ￝\"￝#￝$￝\001\002\0000\002￴\005￴\006￴\007￴\f￴\r￴\016￴\017￴\020￴\021￴\022￴\023￴\024￴\025￴\026￴\027￴\030￴\036￴\037￴ ￴\"￴#￴$￴\001\002\000\004%^\001\002\0000\002￱\005￱\006￱\007￱\f￱\r￱\016￱\017￱\020￱\021￱\022￱\023￱\024￱\025￱\026￱\027￱\030￱\036￱\037￱ ￱\"￱#￱$￱\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006a\b%\t#\n&\013$\001\002\000D\002￡\004￡\005￡\006￡\007￡\b￡\t￡\n￡\013￡\f￡\r￡\016￡\017￡\020￡\021￡\022￡\023￡\024￡\025￡\026￡\027￡\030￡\031￡\032￡\033￡\034￡\035￡\036￡\037￡ ￡\"￡#￡$￡\001\002\000\036\005 \f\026\r\n\016\020\017\021\020\004\021\006\022\034\023\f\024\r\025\t\026\017\"\024$\036\001\002\000\f\006d\b%\t#\n&\013$\001\002\000D\002￢\004￢\005￢\006￢\007￢\b￢\t￢\n￢\013￢\f￢\r￢\016￢\017￢\020￢\021￢\022￢\023￢\024￢\025￢\026￢\027￢\030￢\031￢\032￢\033￢\034￢\035￢\036￢\037￢ ￢\"￢#￢$￢\001\002" });
  





















































































































































































































































































  public short[][] action_table()
  {
    return _action_table;
  }
  
  protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000b\000\016\002\026\003\022\004\004\005\031\006\024\007\027\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004\004\005\031\006\024\007[\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004@\005\031\006\024\007A\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\f\0032\004\004\005\031\006\024\007\027\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\b\004\036\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004 \005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004)\005\031\006\024\001\001\000\b\004(\005\031\006\024\001\001\000\b\004'\005\031\006\024\001\001\000\b\004&\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\n\004\004\005\031\006\024\0071\001\001\000\n\004\004\005\031\006\024\0070\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\b\0045\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\0048\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004;\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004>\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\b\004L\005\031\006\024\001\001\000\b\004K\005\031\006\024\001\001\000\b\004J\005\031\006\024\001\001\000\b\004I\005\031\006\024\001\001\000\b\004H\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\b\004N\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004Q\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004T\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004W\005\031\006\024\001\001\000\002\001\001\000\b\004Y\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\002\001\001\000\b\004_\005\031\006\024\001\001\000\002\001\001\000\002\001\001\000\b\004b\005\031\006\024\001\001\000\002\001\001\000\002\001\001" });
  





















  protected CUP.Parser.actions action_obj;
  






















  public short[][] reduce_table()
  {
    return _reduce_table;
  }
  



  protected void init_actions()
  {
    action_obj = new CUP.Parser.actions(this);
  }
  






  public java_cup.runtime.Symbol do_action(int act_num, lr_parser parser, Stack stack, int top)
    throws Exception
  {
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }
  

  public int start_state() { return 0; }
  
  public int start_production() { return 1; }
  
  public int EOF_sym() {
    return 0;
  }
  
  public int error_sym() { return 1; }
  



  protected HashMap m_Symbols = new HashMap();
  

  protected Hashtable<String, Integer> m_AttributeTypes = new Hashtable();
  

  protected Boolean m_Result = null;
  




  public void setSymbols(HashMap value)
  {
    m_Symbols = value;
  }
  




  public HashMap getSymbols()
  {
    return m_Symbols;
  }
  




  public void setAttributeTypes(Hashtable value)
  {
    m_AttributeTypes = value;
  }
  




  public Hashtable getAttributeTypes()
  {
    return m_AttributeTypes;
  }
  




  public void setResult(Boolean value)
  {
    m_Result = value;
  }
  




  public Boolean getResult()
  {
    return m_Result;
  }
  









  public static Object getValue(Instance instance, int index)
  {
    if (instance.isMissing(index))
      return new Double(Instance.missingValue());
    if (instance.attribute(index).isNominal())
      return new String(instance.stringValue(index));
    if (instance.attribute(index).isString())
      return new String(instance.stringValue(index));
    if (instance.attribute(index).isNumeric()) {
      return new Double(instance.value(index));
    }
    throw new IllegalArgumentException("Unhandled attribute type '" + instance.attribute(index).type() + "'!");
  }
  








  public static Instances filter(String expression, Instances input)
    throws Exception
  {
    Instances output = new Instances(input, 0);
    

    Hashtable<String, Integer> attTypes = new Hashtable();
    for (int i = 0; i < input.numAttributes(); i++)
      attTypes.put("ATT" + (i + 1), Integer.valueOf(input.attribute(i).type()));
    if (input.classIndex() > -1) {
      attTypes.put("CLASS", Integer.valueOf(input.classAttribute().type()));
    }
    
    SymbolFactory sf = new DefaultSymbolFactory();
    HashMap symbols = new HashMap();
    ByteArrayInputStream parserInput = new ByteArrayInputStream(expression.getBytes());
    for (int i = 0; i < input.numInstances(); i++) {
      Instance instance = input.instance(i);
      

      for (int n = 0; n < instance.numAttributes(); n++) {
        if (n == instance.classIndex())
          symbols.put("CLASS", getValue(instance, n));
        symbols.put("ATT" + (n + 1), getValue(instance, n));
      }
      

      parserInput.reset();
      Parser parser = new Parser(new Scanner(parserInput, sf), sf);
      parser.setSymbols(symbols);
      parser.parse();
      if (parser.getResult().booleanValue()) {
        output.add((Instance)instance.copy());
      }
    }
    return output;
  }
  











  public static void main(String[] args)
    throws Exception
  {
    String expression = args[0];
    

    BufferedReader reader = new BufferedReader(new java.io.FileReader(args[1]));
    Instances input = new Instances(reader);
    reader.close();
    if (args[2].equals("first")) {
      input.setClassIndex(0);
    } else if (args[2].equals("last")) {
      input.setClassIndex(input.numAttributes() - 1);
    } else {
      input.setClassIndex(Integer.parseInt(args[2]) - 1);
    }
    
    Instances output = filter(expression, input);
    

    BufferedWriter writer = new BufferedWriter(new FileWriter(args[3]));
    writer.write(new Instances(output, 0).toString());
    writer.newLine();
    for (int i = 0; i < output.numInstances(); i++) {
      writer.write(output.instance(i).toString());
      writer.newLine();
    }
    writer.flush();
    writer.close();
  }
}
